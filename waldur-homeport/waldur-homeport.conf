# This file is managed by Ansible, manual changes will be overwritten.

server {
    listen 80;
    server_tokens off;

    gzip on;
    gzip_types
        application/javascript
        application/rss+xml
        application/json
        application/x-javascript
        application/xml
        image/svg+xml
        text/css
        text/javascript
        text/js
        text/xml
        text/plain
    ;

    if (-f /var/nginx-maintenance) {
        return 503;
        break;
    }

    error_page 503 @maintenance;

    location @maintenance {
        rewrite ^(.*)$ /maintenance.html;
    }

    location /images/favicon.ico {
        alias /opt/waldur-homeport/favicon.ico;
    }
    location /login-logo.png {
        alias /opt/waldur-homeport/login-logo.png;
        expires 7d;
    }
    location /maintenance.html {
        alias /opt/waldur-homeport/maintenance.html;
        sendfile off;
    }

    location /manifest.json {
        alias /etc/waldur-homeport/manifest.json;
    }

    location /sidebar-logo.png {
        alias /opt/waldur-homeport/sidebar-logo.png;
        expires 7d;
    }

    location /scripts/configs/config.json {
        alias /etc/waldur-homeport/config.json;
        expires 4h;
    }

    location /views/policy/privacy.html {
        alias /opt/waldur-homeport/privacy.html;
    }

    location /views/policy/privacy-full.html {
        alias /opt/waldur-homeport/privacy-full.html;
    }

    location /views/tos/index.html {
        alias /opt/waldur-homeport/tos.html;
    }

    location / {
        root /usr/share/waldur-homeport;
        index index.html;

        location = /index.html {
            expires -1;
        }

        location ~ /(css|fonts|images|scripts)$ {
            expires 7d;
        }

        location = /login_completed/ {
            return 200 'Authentication is pending.';
            add_header Content-Type text/plain;
        }

        location = /login_failed/ {
            return 401 'Authentication has failed.';
            add_header Content-Type text/plain;
        }
    }

    location ~ ^/(api/|api-auth/|media/|admin/|static/) {
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Headers' 'Accept, Accept-Encoding, Authorization, Content-Type, Origin, User-Agent, X-CSRFToken, X-Requested-With' always;
        add_header 'Access-Control-Allow-Methods' 'DELETE, GET, OPTIONS, PATCH, POST, PUT' always;
        add_header 'Access-Control-Allow-Origin' "$http_origin" always;
        add_header 'Access-Control-Expose-Headers' 'Link, X-Result-Count' always;

        include uwsgi_params;
        uwsgi_param Host $host;
        uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for;
        uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto;
        uwsgi_param X-Real-IP $remote_addr;

        uwsgi_buffer_size 16k;
        uwsgi_buffers 8 32k;
        uwsgi_busy_buffers_size 32k;

        uwsgi_pass waldur-mastermind-uwsgi:8000;
    }

    location /.well-known {
        root /opt/letsencrypt;
    }
}

